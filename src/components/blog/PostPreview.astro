---
import type { HTMLTag, Polymorphic } from "astro/types";
import type { CollectionEntry } from "astro:content";

import { getPostSortDate } from "@/data/post";

import FormattedDate from "../FormattedDate.astro";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	post: CollectionEntry<"post">;
	withDesc?: boolean;
};

const { as: Tag = "div", post, withDesc = false } = Astro.props;
const postDate = getPostSortDate(post);
---

<div class="flex sm:justify-between">
	<Tag>
		{post.data.draft && <span class="text-red-500">(Draft) </span>}
		<span class="font-bold text-accent no-underline sm:text-lg">#</span>
		<a
			class="cactus-link text-base text-accent-2 sm:text-lg"
			data-astro-prefetch
			href={`/posts/${post.slug}/`}
		>
			{post.data.title}
		</a>
	</Tag>
	<FormattedDate
		class="invisible hidden text-base text-quote sm:visible sm:block"
		date={postDate}
	/>
</div>

{withDesc && <q class="line-clamp-3 italic">{post.data.description}</q>}

<div class="ms-4 text-xs sm:ms-0 sm:text-right sm:text-sm">
	{
		post.data.tags.map((s: any, i: any) => (
			<>
				<a href={`/tags/${s}/`} class="cactus-link">#{s}</a>
				{i < post.data.tags.length - 1 && ", "}
			</>
		))
	}
</div>
